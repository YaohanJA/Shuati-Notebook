So already in this course we've talked about Jupyter notebooks and we talked about how they can be used for sharing code, to be able to document code and be able to collaborate on working and data sets and manipulating data and maybe even putting together a simple machine learning models. But AWS have seen that and seen how useful they are in this space and made them specifically available inside of the SageMaker service through SageMaker notebooks. Now SageMaker notebooks are just Jupyter notebooks, but they're in a managed environment, which makes it super simple to set them up and to get using them. So let's jump into AWS and have a look at the SageMaker notebooks in action. So if I just jump into the AWS console and I've already navigated through to SageMaker. So to get to where the notebooks are no surprise. Over here on the left hand side, we've got a little notebook section so we can have a look at the notebook instances, something called lifecycle configurations and we can also configure some Git repositories as well, but we're going to go to notebook instances, so I'm going to click there and we can see here a list of the current notebook instances that I have and we we don't have any. So when I create labs for this course, quite often we'll have a Jupyter notebook already loaded up in here for us but in this lesson, we're just going to walk through how we actually go about setting one up. So we click at the top right over here. We have create notebook instance. So I'm going to go ahead and click that and really it's just a typical kind of AWS workflow to follow the bouncing ball through all the different prompts until we get a notebook instance. So let's give it a name and I'm going to call this one a demo notebook I think. There we go. Then we get to choose the instance type, and this is a machine learning instance type and we can see here all of the different sizes of instances that we get to choose from and they're all pretty much they're all listed here all the way down to the P2 on the P2 very large is, but the T2 medium is selected by default, which is course at the top of the list and that's actually what I'm going to have selected for this lesson and you might say, well, why are we doing that? We're doing that just because it's a quick demo and we're not doing anything juicy with any data and that actually is the case. We're just going to be loading up a Jupyter notebook but you also can use a T2 medium like this quite effectively in a production environment and that's because the Jupyter notebook itself is just running a notebook server. All it's doing is allowing you to get into the notebooks themselves and run a little bit of code. Now, if you want to do some data manipulation. If you want to do that manipulation on the server, then if you're dealing with a large data set, then you might want to start making this notebook instance larger. But remember the SDKs both the Boto SDK which allows us to control SageMaker and also the Amazon SageMaker SDK itself, which allows us to be able to configure it models inside of SageMaker. We can do both of those things they then call off to infrastructure to the SageMaker infrastructure management, which is going to go and spin up other instances. So remember that this, in most cases our notebook instance, is just a control center that we're using to be able to go and then spin up infrastructure elsewhere. So I could have this T2 medium instance, as an totally appropriate size of an instance, to spin up the biggest machine learning job that you can imagine on AWS because all I'm doing is controlling on API endpoint and we'll stick with a T2 medium because that really is all that we need. Then we have an option about elastic inference, which gives us the ability to add some GPU capability in some cases. But we're going to leave that as none for now and then we come down to permissions and encryption and in here we get to choose, and IAM roles as identity and access management role. This is exactly the same as if you have an instance profile running on an EC2 instance, we need to give permission to the running server environment if we want it to be able to interact with other services inside of AWS and a key one, of course, is going to be S3. So if we want our Jupyter notebook server and the notebook inside of that server to be able to interact with data inside of S3 then we need to give it permissions to do so and we do that through a role and this console page is one of those pages that's set up to be able to actually create the role for you on the fly rather than having to do the dash off to the IAM console page so I can go ahead and say, Create a New Role from here. It will then just bring me up this pop up box and says, okay, what do you want it to have access to? And it knows straight off that the thing you're likely to want access to is S3 and so if this is all you need, then this page is everything. Otherwise, of course, you can still go after IAM and create by hand. So I'm just going to go ahead and say yes, I want S3 access and for now I'm just going to say any bucket. So it's got access to all the S3 buckets inside of this account that I'm going to go ahead and click, Create Role and actually does it pretty quickly and just brings back this confirmation inside of the actual console page itself. So we're going to go ahead and use that. We then have these options down here. Now, this is saying, do we want root access enabled for our instance? Now, this is nothing to do with the root account or the root user inside of our AWS Account. This is not an IAM thing. This is to do with the users on the actual server instance that's going to be spinning up for us where our SageMaker environment will be and do we want the users of this machine to be able to have low level access to this box or not? Now, because we are creating this for ourselves and we trust ourselves, we're going to go ahead and give ourselves root access but if we wanted to be able to restrict what we could do on the box a little, then we could go ahead and click "Disabled." So I'm going to keep that as enabled and we have some encryption options here as well, so we can encrypt the volume that is associated with our notebook instance and if the data that we're performing our analysis on or a machine learning on is going to be on our actual Jupyter notebook instance itself and if that data has encryption requirements from, say, the industry that we work in, then we might have to set that. But for now, I'm going to leave that as it is, there are then a couple of other options down the bottom here. The only one I really want to talk about is Network. So by default, our Jupyter notebook instance is going to be created inside of somewhere, somewhere managed inside of our account, and it's going to have internet access. It's going to have a straight out access to the internet. That's how we're going to connect to it. Now it doesn't mean that it's open free for all, and anybody can get into it. You still have to be authenticated to get into this instance, but it doesn't have access to resources inside of Virtual Private Cloud or VPCs inside of our account, and so that's where we can set that up. So if we have VPCs inside of our account and we can go ahead and select them from here in this account, I only have the default one currently available and but if I had data sets or other resources which were inside of VPCs in my account, I could go ahead and select that I want this notebook instance to be able to connect with that but I don't want to do that for now, so I'm going to leave that as a no VPC. Now let's just scroll to the bottom, leave the other options as they are and click, Create Notebook Instance, and that's going to go off and do exactly that, as we would expect it to. Now it takes just a moment to set up a little bit longer than a regular EC2 instance, maybe because it's got to go and do all of those normal EC2 type actions of allocating resources in the back end and but it's also got to bring, of course, or all of the SageMaker notebooks configuration over to that box as well. So what is going to pause the video here and then we're going to come back when this pending state has changed and what feels like a minute or two later, it's now in service. So our demo notebook is in service and we have a couple of options here to be able to open Jupyter or open Jupyter lab and this is essentially two different end points to get into the same SageMaker notebook instance to look at either the traditional Jupyter notebook itself or the Jupyter labs interface for their same thing and now we're going to concentrate on the Jupyter notebooks the traditional view, if you like in this lesson on DL the lessons of this course Now, just before I click here, I just want to highlight what's about to happen. I'm about to click this link in the AWS console. It's going to redirect me through to the web endpoint of a Jupyter notebook server running inside of my account. Now the way it's going to do that is when I click this link, it's actually going to create a presigned URL. So the console is going to communicate with the AWS API which, of course, is what it does all the time when we're clicking on things in the console but the specific action is going to request is to create a presigned URL, using the credentials that I have currently logged into the console with to generate that URL and then redirect my browser into it so I can see that notebook instance. Now the reason why that's important is because if I was to go ahead and say right click on this link, copy the link, and send it to say Adrian Cantrill my Linux Academy training architect colleague and if I was just to give it to him and say, Hey, have a look at this SageMaker notebook instance. Well, if he clicked on the link that I send him by copying this link what, he's not logged in to this console? It wouldn't be able to make that presigned URL and he wouldn't be able to navigate into the notebook instance. So there is security around access to the Jupyter notebook instance through this process that were about to go on now, and you can, of course, restrict access to that API call so that you can secure their SageMaker notebook instances and prevent people from creating that presigned URL but of course I'm running here is administrator access. I'm going to go ahead and click on this link, and when I do it, we can just watch this screen actually tells you it's doing it, but it happens relatively quickly, so I just wanted to talk about it before I actually did it. So let's go ahead and click that link. It opens up a new tab. We go back to the console. It says we're redirecting you. So this is through the presigned URL and then in we go into the Jupyter Notebook server or the Jupyter notebook instance itself and let's just zoom in a bit because that's a little small and so here is a my empty Jupyter notebook instance, with no notebooks currently in it. Well, I say there's no notebooks in it, but there is actually plenty of code knocking around that we can go and take a look at and these are these samples that AWS have put together. They're all very easily accessible through these Jupyter notebooks and we do it through the SageMaker examples tab at the top here. So let's just go and take a quick look at that and you'll see in here there's a really a very, very comprehensive list of lots of different notebooks and these are closed tabs. If I open some of these out and then you'll see there's even more inside of these lists. Now I'm going to be straight up with you. I have not gone through every single one of these clearly because there's way too many of them but if you want to use a particular kind of especially built in algorithm or perform a specific type of action with SageMaker, you're likely to find some example of that being done inside of one of these notebooks. Now, these are actually just links to notebooks. If you want to use one of them, then you have to click the use button over on the right hand side. So if I just scroll down here, we'll find that the one we were looking at in a previous lesson, the PCA a example and if I just roll over here to the right hand side and click Use. It will ask me to confirm that I want to make a copy of this. I can rename it for my own purposes if I want to and click, Create Copy and when I do that, it will pull that actual ipynb file into my notebook instance and then load up that particular notebook complete with a relatively comprehensive amount of documentation and this sample code that you can go through here and execute in this case, it would be principal component analysis on the MNIST data set. Which MNIST data set, is it? See yes, it's the traditional handwritten digits from 0 to 9. A very common data set if you're playing around with machine learning. So let me just close that tab down. We don't need this notebook anymore. I'm going to leave that page here. If I scroll to the top and I go to my running tab, I can see that this that notebook is still running. I can go ahead and shut that down because I don't need that to still be running. Indeed, I'm going to go ahead and shut down this entire instance because I don't need the notebook instance to be running anymore. So back over to the console. I can highlight this particular notebook instance. Go to actions and then I can say Stop and if I do that, it will go into a stopping state. It'll eventually stop and then I'll be able to come back and say Actions delete and just while it is stopping, I want to talk quickly about lifecycle configurations, So lifecycle configurations are very much like bootstrap scripts that you can use on EC2 instances. So these are script that you can run when you create your Jupyter notebook instances. So if we click through to lifecycle configurations and quickly, just look at the options you have for creating one. We won't go through the process of fully making one. We say create configuration and literally you can just define a script that you want to run every time that the notebook starts or just when the notebook is created. So you can define a couple of different scripts there. Okay, I'm just going to navigate back and see if these this has stopped. I think I saw that it had stopped the notebook instances at the side here. It has stopped. So I'm just going to select it again and go to actions and say, Delete and Delete down back to the starting point for this lesson. So we've taken a look at creating a Jupyter notebook instance. We've looked a little bit of the security of that Jupiyer notebook instance through the IAM role that we give to that instance whether we enable root access or not, and also the fact that we're getting access into the instance through that presigned URL. Of course, throughout this course, we make heavy use of Jupyter notebooks and in all cases, where doing it through SageMaker notebooks. 